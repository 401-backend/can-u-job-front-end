{"version":3,"sources":["components/conditionals/conditionals.js","components/signIn/signIn.js","components/signUp/signUp.js","components/login/login.js","components/job-list/job-list.js","App.js","serviceWorker.js","index.js"],"names":["render","condition","children","If","props","React","Children","map","child","cloneElement","Then","Else","SignIn","useState","username","setUsername","password","setPassword","handleInputChange","e","console","log","target","name","value","handleOauth","onSubmit","preventDefault","placeholder","onChange","type","onClick","switchLogin","style","cursor","SignUp","email","setEmail","Login","loginType","setLoginType","jobList","listJobs","currentBid","createdBy","job","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d23fc93.chunk.js","sourcesContent":["import React from 'react';\n\nconst render = (condition = false, children = null) => {\n  return !!condition ? children : null;\n};\n\nexport const If = props =>\n  React.Children.map(props.children, child =>\n    React.cloneElement(child, { condition: props.condition }),\n  );\n\nexport const Then = props => render(props.condition, props.children);\nexport const Else = props => render(!props.condition, props.children);\n\n/*\n<When condition={true}>\n  <h2>When Works</h2>\n</When>\n*/\nexport const When = props => render(props.condition, props.children);\n\n/*\n<Unless condition={administrator}>\n  Pay more $$ and we will make you an admin\n</Unless>\n*/\nexport const Unless = props => render(!props.condition, props.children);","import React, { useState } from 'react';\n\n\nconst SignIn = props => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleInputChange = (e) => {\n    console.log(e.target.name);\n    switch(e.target.name){\n      case 'username':\n        setUsername(e.target.value);\n        break;\n      case 'password':\n        setPassword(e.target.value);\n        break;\n    }\n  }\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    console.log('signin', username, password);\n  }\n\n  const handleOauth = () => {\n\n  }\n\n  const handleLoginSwitch = () => {\n    props.switchLogin('signup')\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleFormSubmit}>\n        <input\n          placeholder=\"username\"\n          name=\"username\"\n          onChange={handleInputChange}\n        />\n        <input\n          placeholder=\"password\"\n          name=\"password\"\n          onChange={handleInputChange}\n        />\n        <input type=\"submit\" value=\"Log In\" />\n      </form>\n      <p onClick={handleLoginSwitch} style={{ cursor:\"pointer\" }}>Not a member?.. click to sign up</p>\n      <button onSubmit={handleOauth} >Login with Google</button>\n      <button onSubmit={handleOauth} >Login with GitHub</button>\n    </div>\n  )\n}\n\nexport default SignIn;","import React, { useState } from 'react';\n\n\nconst SignUp = props => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n\n\n  const handleInputChange = (e) => {\n    switch(e.target.name){\n      case 'username':\n        setUsername(e.target.value);\n        break;\n      case 'password':\n        setPassword(e.target.value);\n        break;\n      case 'email':\n        setEmail(e.target.value);\n        break;\n    }\n  }\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    console.log('signup', username, email, password);\n  }\n\n  const handleOauth = () => {\n\n  }\n\n  const handleLoginSwitch = () => {\n    props.switchLogin('signin')\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleFormSubmit}>\n        <label>\n          <input\n            placeholder=\"email\"\n            name=\"email\"\n            onChange={handleInputChange}\n          />\n        </label>\n        <label>\n          <input\n            placeholder=\"username\"\n            name=\"username\"\n            onChange={handleInputChange}\n          />\n        </label>\n        <label>\n          <input\n            placeholder=\"password\"\n            name=\"password\"\n            onChange={handleInputChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"Log In\" />\n      </form>\n      <p onClick={handleLoginSwitch} style={{ cursor:\"pointer\" }}>Already a member?.. click to login</p>\n      <button onSubmit={handleOauth} >Signup with Google</button>\n      <button onSubmit={handleOauth} >Signup with GitHub</button>\n    </div>\n  )\n}\n\nexport default SignUp;","import React, { useState } from 'react';\nimport { Else, If, Then } from '../conditionals/conditionals';\nimport SignIn from '../signIn/signIn';\nimport SignUp from '../signUp/signUp';\n\nconst Login = props => {\n  const [loginType, setLoginType] = useState('signin');\n\n  const switchLogin = (type) => {\n    setLoginType(type);\n  }\n\n  return (\n    <div>\n      <If condition={loginType === 'signup'}>\n        <Then>\n          <SignUp switchLogin={switchLogin} />\n        </Then>\n        <Else>\n          <SignIn switchLogin={switchLogin} />\n        </Else>\n      </If>\n    </div>\n  )\n}\n\nexport default Login;","import React from 'react';\n\nfunction jobList(props){\n  const jobs = [\n    {\n      name: 'david',\n      currentBid: 200,\n      createdBy: 'david'\n    },\n    {\n      name: 'david',\n      currentBid: 200,\n      createdBy: 'david'\n    }\n  ];\n  const listJobs = jobs.map(job => \n    <tr>\n      <td>{job.name}</td>\n      <td>{job.currentBid}</td>\n      <td>{job.createdBy}</td>\n      <td><button>Details</button></td>\n    </tr>\n  );\n  return (\n    <table>\n      <th>Name</th>\n      <th>Bid</th>\n      <th>Owner</th>\n      {listJobs}\n    </table>\n  )\n}\n\n\nexport default jobList;","import React from 'react';\nimport './App.css';\nimport Login from './components/login/login';\nimport JobList from './components/job-list/job-list';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">   \n      \n      <Login/>\n      <JobList/>\n    </div>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}