{"ast":null,"code":"const callAPI = (url, method = \"get\", body, token, handler, errorHandler) => {\n  return fetch(url, {\n    method: method,\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + token\n    },\n    body: body ? JSON.stringify(body) : undefined\n  }).then(response => response.json()).then(data => typeof handler === \"function\" ? handler(data) : data).catch(e => typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e));\n};\n\nconst callAPIBasic = (url, auth, handler, errorHandler) => {\n  return fetch(url, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Authorization\": `Basic ${auth}`\n    },\n    body: undefined\n  }).then(response => response.text()).then(data => {\n    if (data === '{\"error\":\"Invalid User ID/Password\"}') {\n      return {\n        loggedIn: false,\n        data: null\n      };\n    } else {\n      return {\n        loggedIn: true,\n        data: data\n      };\n    }\n  }).catch(e => typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e));\n};\n\nconst callAPISignUp = (url, body, errorHandler) => {\n  return fetch(url, {\n    method: 'POST',\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: body ? JSON.stringify(body) : undefined\n  }).then(response => response.text()).catch(e => typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e));\n};\n\nexport { callAPI, callAPIBasic, callAPISignUp };","map":{"version":3,"sources":["/Users/nataliealway/devstation/401-backend/can-u-job-front-end/can-u-front-end/src/lib/api.js"],"names":["callAPI","url","method","body","token","handler","errorHandler","fetch","mode","cache","headers","JSON","stringify","undefined","then","response","json","data","catch","e","console","error","callAPIBasic","auth","text","loggedIn","callAPISignUp"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,GAAD,EAAMC,MAAM,GAAG,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,OAAnC,EAA4CC,YAA5C,KAA6D;AAC3E,SAAOC,KAAK,CAACN,GAAD,EAAM;AAChBC,IAAAA,MAAM,EAAEA,MADQ;AAEhBM,IAAAA,IAAI,EAAE,MAFU;AAGhBC,IAAAA,KAAK,EAAE,UAHS;AAIhBC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiB,YAAYN;AAFtB,KAJO;AAOhBD,IAAAA,IAAI,EAAEA,IAAI,GAAGQ,IAAI,CAACC,SAAL,CAAeT,IAAf,CAAH,GAA0BU;AAPpB,GAAN,CAAL,CASJC,IATI,CASCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATb,EAUJF,IAVI,CAUCG,IAAI,IAAK,OAAOZ,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAACY,IAAD,CAAvC,GAAgDA,IAV1D,EAWJC,KAXI,CAWEC,CAAC,IACN,OAAOb,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,CAACa,CAAD,CAAjD,GAAuDC,OAAO,CAACC,KAAR,CAAcF,CAAd,CAZpD,CAAP;AAcD,CAfD;;AAkBA,MAAMG,YAAY,GAAG,CAACrB,GAAD,EAAMsB,IAAN,EAAYlB,OAAZ,EAAqBC,YAArB,KAAsC;AAEzD,SAAOC,KAAK,CAACN,GAAD,EAAM;AAChBC,IAAAA,MAAM,EAAE,MADQ;AAEhBM,IAAAA,IAAI,EAAE,MAFU;AAGhBE,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,SAAQa,IAAK;AAHxB,KAHO;AAQhBpB,IAAAA,IAAI,EAAEU;AARU,GAAN,CAAL,CAUNC,IAVM,CAUDC,QAAQ,IAAIA,QAAQ,CAACS,IAAT,EAVX,EAWNV,IAXM,CAWDG,IAAI,IAAI;AACZ,QAAGA,IAAI,KAAK,sCAAZ,EAAmD;AACjD,aAAO;AAACQ,QAAAA,QAAQ,EAAE,KAAX;AAAkBR,QAAAA,IAAI,EAAE;AAAxB,OAAP;AACD,KAFD,MAGK;AACH,aAAO;AAACQ,QAAAA,QAAQ,EAAE,IAAX;AAAiBR,QAAAA,IAAI,EAAEA;AAAvB,OAAP;AACD;AACF,GAlBM,EAmBJC,KAnBI,CAmBEC,CAAC,IACN,OAAOb,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,CAACa,CAAD,CAAjD,GAAuDC,OAAO,CAACC,KAAR,CAAcF,CAAd,CApBpD,CAAP;AAsBD,CAxBD;;AA0BA,MAAMO,aAAa,GAAG,CAACzB,GAAD,EAAME,IAAN,EAAYG,YAAZ,KAA6B;AACjD,SAAOC,KAAK,CAACN,GAAD,EAAM;AAChBC,IAAAA,MAAM,EAAE,MADQ;AAEhBM,IAAAA,IAAI,EAAE,MAFU;AAGhBC,IAAAA,KAAK,EAAE,UAHS;AAIhBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAJO;AAKhBP,IAAAA,IAAI,EAAEA,IAAI,GAAGQ,IAAI,CAACC,SAAL,CAAeT,IAAf,CAAH,GAA0BU;AALpB,GAAN,CAAL,CAOJC,IAPI,CAOCC,QAAQ,IAAIA,QAAQ,CAACS,IAAT,EAPb,EAQJN,KARI,CAQEC,CAAC,IACN,OAAOb,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,CAACa,CAAD,CAAjD,GAAuDC,OAAO,CAACC,KAAR,CAAcF,CAAd,CATpD,CAAP;AAWD,CAZD;;AAcA,SAASnB,OAAT,EAAkBsB,YAAlB,EAAgCI,aAAhC","sourcesContent":["const callAPI = (url, method = \"get\", body, token, handler, errorHandler) => {\n  return fetch(url, {\n    method: method,\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: { \n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + token},\n    body: body ? JSON.stringify(body) : undefined\n  })\n    .then(response => response.json())\n    .then(data => (typeof handler === \"function\" ? handler(data) : data))\n    .catch(e =>\n      typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e)\n    );\n};\n\n\nconst callAPIBasic = (url, auth, handler, errorHandler) => {\n\n  return fetch(url, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Authorization\": `Basic ${auth}`,\n    },\n    body: undefined,\n  })\n  .then(response => response.text())\n  .then(data => {\n    if(data === '{\"error\":\"Invalid User ID/Password\"}'){\n      return {loggedIn: false, data: null};\n    } \n    else {\n      return {loggedIn: true, data: data};\n    }\n  })\n    .catch(e =>\n      typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e)\n    );\n};\n\nconst callAPISignUp = (url, body, errorHandler) => {\n  return fetch(url, {\n    method: 'POST',\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: body ? JSON.stringify(body) : undefined\n  })\n    .then(response => response.text())\n    .catch(e =>\n      typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e)\n    );\n};\n\nexport { callAPI, callAPIBasic, callAPISignUp };\n"]},"metadata":{},"sourceType":"module"}