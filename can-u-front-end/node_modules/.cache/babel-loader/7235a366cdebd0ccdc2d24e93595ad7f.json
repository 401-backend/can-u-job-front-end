{"ast":null,"code":"import cookie from 'react-cookies';\n/**\n * general function for API calls\n * @param {string} url \n * @param {string} method \n * @param {object} body \n * @param {string} token \n * @param {function} handler \n * @param {function} errorHandler \n */\n\nconst callAPI = (url, method = \"get\", body, token, handler, errorHandler) => {\n  return fetch(url, {\n    method: method,\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + token\n    },\n    body: body ? JSON.stringify(body) : undefined\n  }).then(response => response.json()).then(data => typeof handler === \"function\" ? handler(data) : data).catch(e => typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e));\n};\n/**\n * function to hit API on signin\n * @param {string} url \n * @param {string} auth \n * @param {function} handler \n * @param {function} errorHandler \n */\n\n\nconst callAPIBasic = (url, auth, handler, errorHandler) => {\n  return fetch(url, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Authorization\": `Basic ${auth}`\n    },\n    body: undefined\n  }).then(response => response.text()).then(data => {\n    if (data === '{\"error\":\"Invalid User ID/Password\"}') {\n      return {\n        loggedIn: false,\n        data: null,\n        loginStatus: false\n      };\n    } else {\n      console.log('signin data', data);\n      cookie.save('auth', data);\n      return {\n        loggedIn: true,\n        data: data,\n        loginStatus: true\n      };\n    }\n  }).catch(e => typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e));\n};\n/**\n * function to hit API for signup\n * @param {string} url \n * @param {object} body \n * @param {function} errorHandler \n */\n\n\nconst callAPISignUp = (url, body, errorHandler) => {\n  return fetch(url, {\n    method: 'POST',\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: body ? JSON.stringify(body) : undefined\n  }).then(response => {\n    if (response.status === 500) {\n      return 'username taken';\n    } else {\n      let token = response.text();\n      cookie.save('auth', token);\n      return token;\n    }\n  }).catch(e => typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e));\n};\n\nexport { callAPI, callAPIBasic, callAPISignUp };","map":{"version":3,"sources":["/Users/nataliealway/devstation/401-backend/can-u-job-front-end/can-u-front-end/src/lib/api.js"],"names":["cookie","callAPI","url","method","body","token","handler","errorHandler","fetch","mode","cache","headers","JSON","stringify","undefined","then","response","json","data","catch","e","console","error","callAPIBasic","auth","text","loggedIn","loginStatus","log","save","callAPISignUp","status"],"mappings":"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","sourcesContent":["import cookie from 'react-cookies';\n\n/**\n * general function for API calls\n * @param {string} url \n * @param {string} method \n * @param {object} body \n * @param {string} token \n * @param {function} handler \n * @param {function} errorHandler \n */\nconst callAPI = (url, method = \"get\", body, token, handler, errorHandler) => {\n  return fetch(url, {\n    method: method,\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: { \n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + token},\n    body: body ? JSON.stringify(body) : undefined\n  })\n    .then(response => response.json())\n    .then(data => (typeof handler === \"function\" ? handler(data) : data))\n    .catch(e =>\n      typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e)\n    );\n};\n\n/**\n * function to hit API on signin\n * @param {string} url \n * @param {string} auth \n * @param {function} handler \n * @param {function} errorHandler \n */\nconst callAPIBasic = (url, auth, handler, errorHandler) => {\n\n  return fetch(url, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Authorization\": `Basic ${auth}`,\n    },\n    body: undefined,\n  })\n  .then(response => response.text())\n  .then(data => {\n    if(data === '{\"error\":\"Invalid User ID/Password\"}'){\n      return {loggedIn: false, data: null, loginStatus: false};\n    } \n    else {\n      console.log('signin data', data);\n      cookie.save('auth', data);\n      return {loggedIn: true, data: data, loginStatus: true};\n    }\n  })\n    .catch(e =>\n      typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e)\n    );\n};\n\n/**\n * function to hit API for signup\n * @param {string} url \n * @param {object} body \n * @param {function} errorHandler \n */\nconst callAPISignUp = (url, body, errorHandler) => {\n  return fetch(url, {\n    method: 'POST',\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: body ? JSON.stringify(body) : undefined\n  })\n    .then(response => {\n      if(response.status === 500){\n        return 'username taken';\n      }else {\n        let token = response.text();\n        cookie.save('auth', token);\n        return token;\n      }\n    })\n    .catch(e =>\n      typeof errorHandler === \"function\" ? errorHandler(e) : console.error(e)\n    );\n};\n\nexport { callAPI, callAPIBasic, callAPISignUp };\n\n"]},"metadata":{},"sourceType":"module"}