{"ast":null,"code":"var _jsxFileName = \"/Users/nataliealway/devstation/401-backend/can-u-job-front-end/can-u-front-end/src/components/auth/auth.js\";\nimport jwt from 'jsonwebtoken';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { If, Then } from '../conditionals/conditionals';\n/**\n * Auth component to only render components if user has required capability\n * @param {*} props \n */\n\nconst Auth = props => {\n  let okToRender = false;\n  let user = {};\n\n  try {\n    user = props.login.token ? jwt.verify(props.login.token, `sauce`) : {};\n    okToRender = props.login.loggedIn && (props.capability ? user.capabilities.includes(props.capability) : true);\n  } catch (e) {}\n\n  return React.createElement(If, {\n    condition: okToRender,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Then, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, props.children)));\n};\n\nconst mapStateToProps = state => ({\n  login: state.login\n});\n\nexport default connect(mapStateToProps)(Auth);","map":{"version":3,"sources":["/Users/nataliealway/devstation/401-backend/can-u-job-front-end/can-u-front-end/src/components/auth/auth.js"],"names":["jwt","React","connect","If","Then","Auth","props","okToRender","user","login","token","verify","loggedIn","capability","capabilities","includes","e","children","mapStateToProps","state"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,EAAT,EAAaC,IAAb,QAAyB,8BAAzB;AAEA;;;;;AAIA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AAElB,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAI;AAEFA,IAAAA,IAAI,GAAGF,KAAK,CAACG,KAAN,CAAYC,KAAZ,GACHV,GAAG,CAACW,MAAJ,CAAWL,KAAK,CAACG,KAAN,CAAYC,KAAvB,EAA+B,OAA/B,CADG,GAEH,EAFJ;AAIAH,IAAAA,UAAU,GACRD,KAAK,CAACG,KAAN,CAAYG,QAAZ,KACCN,KAAK,CAACO,UAAN,GACGL,IAAI,CAACM,YAAL,CAAkBC,QAAlB,CAA2BT,KAAK,CAACO,UAAjC,CADH,GAEG,IAHJ,CADF;AAMD,GAZD,CAYE,OAAOG,CAAP,EAAU,CAAE;;AACd,SACE,oBAAC,EAAD;AAAI,IAAA,SAAS,EAAET,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,KAAK,CAACW,QAAZ,CADF,CADF,CADF;AAOH,CAzBD;;AA2BA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCV,EAAAA,KAAK,EAAEU,KAAK,CAACV;AADmB,CAAL,CAA7B;;AAIA,eAAeP,OAAO,CACpBgB,eADoB,CAAP,CAEbb,IAFa,CAAf","sourcesContent":["import jwt from 'jsonwebtoken';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { If, Then } from '../conditionals/conditionals';\n\n/**\n * Auth component to only render components if user has required capability\n * @param {*} props \n */\nconst Auth = props => {\n\n    let okToRender = false;\n    let user = {};\n\n    try {      \n\n      user = props.login.token\n        ? jwt.verify(props.login.token, `sauce`)\n        : {};\n\n      okToRender =\n        props.login.loggedIn &&\n        (props.capability\n          ? user.capabilities.includes(props.capability)\n          : true);\n\n    } catch (e) {}\n    return (\n      <If condition={okToRender}>\n        <Then>\n          <div>{props.children}</div>\n        </Then>\n      </If>\n    );\n}\n\nconst mapStateToProps = state => ({\n  login: state.login\n});\n\nexport default connect(\n  mapStateToProps,\n)(Auth);\n"]},"metadata":{},"sourceType":"module"}